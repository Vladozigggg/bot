
import logging
import os
import re
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = os.getenv("BOT_TOKEN")
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DB_FILE = "clicker.db"
cooldowns = {}

LEAGUES = [
    ("–†—è–¥–æ–≤–æ–π", 0, 501),
    ("–ï—Ñ—Ä–µ–π—Ç–æ—Ä", 502, 999),
    ("–°–µ—Ä–∂–∞–Ω—Ç", 1000, 2501),
    ("–°—Ç. —Å–µ—Ä–∂–∞–Ω—Ç", 2502, 5000),
    ("–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", 5001, 15001),
    ("–ö–∞–ø–∏—Ç–∞–Ω", 15002, 25001),
    ("–ú–∞–π–æ—Ä", 25002, 39999),
    ("–ü–æ–ª–∫–æ–≤–Ω–∏–∫", 40000, float("inf")),
]

DAILY_MISSIONS = {100: 100, 250: 250, 1000: 1000}

def today_str():
    return (datetime.utcnow() + timedelta(hours=3)).strftime("%Y-%m-%d")

def is_night():
    return 0 <= (datetime.utcnow() + timedelta(hours=3)).hour < 10

async def get_league(clicks):
    for name, lo, hi in LEAGUES:
        if lo <= clicks <= hi:
            return name
    return "‚Äì"

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üñ± –ö–ª–∏–∫ üëÜ"))
main_kb.add(KeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"), KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))
main_kb.add(KeyboardButton("üìã –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí∏ –î–æ–Ω–∞—Ç"))
main_kb.add(KeyboardButton("üéØ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            nickname TEXT,
            clicks INTEGER DEFAULT 0,
            league TEXT,
            daily_clicks INTEGER DEFAULT 0,
            missions_done TEXT DEFAULT '',
            night_clicks INTEGER DEFAULT 0,
            night_hunter INTEGER DEFAULT 0,
            achievements TEXT DEFAULT '',
            date TEXT
        )
        """)
        await db.commit()

@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await init_db()
    uid = m.from_user.id
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT * FROM users WHERE id = ?", (uid,)) as cur:
            user = await cur.fetchone()
        if not user:
            await db.execute("INSERT INTO users (id, date, league) VALUES (?, ?, ?)",
                             (uid, today_str(), "–†—è–¥–æ–≤–æ–π"))
            await db.commit()
            return await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–∏–¥—É–º–∞–π –Ω–∏–∫–Ω–µ–π–º (–¥–æ 7 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ —ç–º–æ–¥–∑–∏):")
        else:
            await m.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_kb)

@dp.message_handler(lambda m: True)
async def all_messages(m: types.Message):
    uid = m.from_user.id
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT nickname FROM users WHERE id = ?", (uid,)) as cur:
            row = await cur.fetchone()
        if row and not row[0]:
            nick = m.text.strip()
            if len(nick) > 7 or re.search(r"[^\w\d_]", nick):
                return await m.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            await db.execute("UPDATE users SET nickname = ? WHERE id = ?", (nick, uid))
            await db.commit()
            return await m.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nick}", reply_markup=main_kb)

    if m.text == "üñ± –ö–ª–∏–∫ üëÜ":
        now_ts = datetime.utcnow().timestamp()
        if now_ts - cooldowns.get(uid, 0) < 3:
            return await m.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏ 3 —Å–µ–∫.")
        cooldowns[uid] = now_ts

        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute("UPDATE users SET date = ? WHERE id = ?", (today_str(), uid))
            await db.commit()

            async with db.execute("SELECT clicks, daily_clicks, night_clicks, night_hunter, achievements FROM users WHERE id = ?", (uid,)) as cur:
                row = await cur.fetchone()
                if row is None:
                    return await m.answer("–û—à–∏–±–∫–∞: —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
                clicks, daily, night, night_hunter, ach = row

            inc = 2 if is_night() else 1
            clicks += inc
            daily += 1
            night += inc if is_night() else 0
            ach_list = ach.split(",") if ach else []

            if night >= 1000 and not night_hunter:
                night_hunter = 1
                ach_list.append("–ù–æ—á–Ω–æ–π –æ—Ö–æ—Ç–Ω–∏–∫")

            league = await get_league(clicks)
            await db.execute("""
                UPDATE users SET clicks=?, daily_clicks=?, night_clicks=?, night_hunter=?, achievements=?, league=?
                WHERE id=?
            """, (clicks, daily, night, night_hunter, ",".join(ach_list), league, uid))
            await db.commit()

        await m.answer(f"üñ± –ö–ª–∏–∫–∏: {clicks} | –õ–∏–≥–∞: {league}
üèÖ –ê—á–∏–≤–∫–∏: {', '.join(ach_list) or '‚Äî'}", reply_markup=main_kb)

    elif m.text == "üìã –ü—Ä–æ—Ñ–∏–ª—å":
        async with aiosqlite.connect(DB_FILE) as db:
            async with db.execute("SELECT nickname, clicks, daily_clicks, night_clicks, league, achievements FROM users WHERE id = ?", (uid,)) as cur:
                row = await cur.fetchone()
                if row is None:
                    return await m.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
                nick, clicks, daily, night, league, ach = row
        await m.answer(f"üë§ {nick}
üñ± {clicks} –∫–ª–∏–∫–æ–≤
üéØ –°–µ–≥–æ–¥–Ω—è: {daily}
üåô –ù–æ—á—å: {night}
üéñ –õ–∏–≥–∞: {league}
üèÖ –ê—á–∏–≤–∫–∏: {ach or '‚Äî'}", reply_markup=main_kb)

    elif m.text == "üéØ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        async with aiosqlite.connect(DB_FILE) as db:
            async with db.execute("SELECT daily_clicks, missions_done FROM users WHERE id = ?", (uid,)) as cur:
                row = await cur.fetchone()
                if row is None:
                    return await m.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
                daily, done = row
        done_list = done.split(",") if done else []
        response = ["üéØ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
"]
        for goal, reward in DAILY_MISSIONS.items():
            mark = "‚úÖ" if str(goal) in done_list else "‚è≥"
            response.append(f"‚Ä¢ –°–¥–µ–ª–∞–π {goal} –∫–ª–∏–∫–æ–≤ ‚Äî +{reward} {mark}")
        await m.answer("
".join(response), reply_markup=main_kb)

    elif m.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        async with aiosqlite.connect(DB_FILE) as db:
            async with db.execute("SELECT nickname, clicks, league FROM users ORDER BY clicks DESC LIMIT 10") as cur:
                top = await cur.fetchall()
        msg = "üèÜ –¢–æ–ø‚Äë10:
" + "
".join(f"{i+1}. {row[0]} ‚Äî {row[1]} [{row[2]}]" for i, row in enumerate(top))
        await m.answer(msg, reply_markup=main_kb)

    elif m.text == "üí∏ –î–æ–Ω–∞—Ç":
        await m.answer("üí∏ –î–æ–Ω–∞—Ç –±—É–¥–µ—Ç –ø–æ–∑–∂–µ!", reply_markup=main_kb)

    elif m.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π":
        link = f"https://t.me/{(await bot.get_me()).username}?start={uid}"
        await m.answer(f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ —Å—Å—ã–ª–∫–µ:
{link}", reply_markup=main_kb)

    elif m.text == "‚ùì –ü–æ–º–æ—â—å":
        await m.answer(
            "üìñ –ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
üñ± –ö–ª–∏–∫ ‚Äî +1 (–Ω–æ—á—å—é √ó2)
üìã –ü—Ä–æ—Ñ–∏–ª—å
üèÜ –†–µ–π—Ç–∏–Ω–≥
üéØ –¶–µ–ª–∏ –¥–Ω—è
üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
            reply_markup=main_kb
        )

if __name__ == '__main__':
    async def main():
        await init_db()
        await dp.start_polling()
    asyncio.run(main())
