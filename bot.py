
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import json
import time
from datetime import datetime, timedelta
import re

API_TOKEN = 'YOUR_BOT_TOKEN'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users_file = 'users.json'

def load_users():
    try:
        with open(users_file, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(data):
    with open(users_file, 'w') as f:
        json.dump(data, f)

users = load_users()

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–ö–ª–∏–∫ üëÜ"))
main_kb.add(KeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"), KeyboardButton("–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))
main_kb.add(KeyboardButton("–î–æ–Ω–∞—Ç"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)
    referrer = message.get_args()
    
    if user_id not in users:
        if not message.from_user.username:
            await message.answer("–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).")
            return
        
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–∏–¥—É–º–∞–π –Ω–∏–∫–Ω–µ–π–º (–Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 7 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ —ç–º–æ–¥–∑–∏):")
        await bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        users[user_id] = {"clicks": 0, "nickname": "", "referrer": referrer, "last_notified": 0}
        save_users(users)
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text and message.from_user.id in map(int, users.keys()) and users[str(message.from_user.id)]["nickname"] == "")
async def nickname_handler(message: types.Message):
    nickname = message.text.strip()
    if len(nickname) > 7 or re.search(r'[^\w\d_]', nickname):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º. –ú–∞–∫—Å–∏–º—É–º 7 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ —ç–º–æ–¥–∑–∏.")
        return
    user_id = str(message.from_user.id)
    users[user_id]["nickname"] = nickname
    referrer = users[user_id]["referrer"]
    if referrer in users:
        users[referrer]["clicks"] += 500
    save_users(users)
    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {nickname}!", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "–ö–ª–∏–∫ üëÜ")
async def click_handler(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in users or users[user_id]["nickname"] == "":
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return
    users[user_id]["clicks"] += 1
    save_users(users)
    await message.answer(f"–¢—ã –∫–ª–∏–∫–Ω—É–ª! –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {users[user_id]['clicks']}")

@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")
async def invite_handler(message: types.Message):
    link = f"https://t.me/{(await bot.get_me()).username}?start={message.from_user.id}"
    await message.answer(f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π +500 –∑–∞ –∫–∞–∂–¥–æ–≥–æ: {link}")

@dp.message_handler(lambda message: message.text == "–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def rating_handler(message: types.Message):
    rating = sorted(users.items(), key=lambda x: x[1]['clicks'], reverse=True)
    top = "
".join([f"{i+1}. {v['nickname']} ‚Äî {v['clicks']}" for i, (k, v) in enumerate(rating[:10])])
    await message.answer(f"üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:

{top}")

@dp.message_handler(lambda message: message.text == "–î–æ–Ω–∞—Ç")
async def donate_handler(message: types.Message):
    await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –¥–æ–Ω–∞—Ç–æ–º üí∏
–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã.")

async def auto_notify():
    while True:
        now = datetime.utcnow() + timedelta(hours=3)  # –ú–°–ö
        if now.minute == 0:
            rating = sorted(users.items(), key=lambda x: x[1]['clicks'], reverse=True)
            top = "
".join([f"{i+1}. {v['nickname']} ‚Äî {v['clicks']}" for i, (k, v) in enumerate(rating[:10])])
            for uid in users:
                try:
                    await bot.send_message(uid, f"üèÜ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:

{top}")
                except:
                    continue
            await asyncio.sleep(60)
        await asyncio.sleep(10)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_notify())
    executor.start_polling(dp, skip_updates=True)
